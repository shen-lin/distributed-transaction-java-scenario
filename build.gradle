plugins {
	id 'org.asciidoctor.convert' version '1.5.3'
	id 'org.springframework.boot' version '2.2.0.M4'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'shenlin84.katacoda.scenarios'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compile 'mysql:mysql-connector-java'
	compile 'org.mariadb.jdbc:mariadb-java-client'
	compile 'org.apache.rocketmq:rocketmq-client:4.4.0'
	compile 'org.springframework.boot:spring-boot-starter-jdbc'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.1.8.RELEASE'
	compile 'org.hibernate:hibernate-core'
	compile 'org.hibernate:hibernate-entitymanager'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		exclude group: 'junit', module: 'junit'
	}
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

task(consumer, dependsOn: 'classes', type: JavaExec) {
    main = 'shenlin84.katacoda.scenarios.distributedtransactionjavascenario.TestRun'
    classpath = sourceSets.main.runtimeClasspath
}
